# Documentation de Squeletml

## Installation

Squeletml requiert un serveur Apache avec PHP 5, sans plus. Aucune base de données n'est utilisée. Pour installer Squeletml, il n'est donc nécessaire que de télécharger l'archive de la dernière version sur la [page d'accueil du logiciel](http://www.jpfleury.net/squeletml), d'extraire l'archive, et de placer les fichiers sur un serveur, par exemple par ftp.

**Notes:**

- pour utiliser la fonction de mise en maintenance du site, la réécriture d'URL doit être activée sur votre serveur;
- pour ajouter des images dans la galerie à partir d'une archive `ZIP` ainsi que pour compresser les archives `TAR` des dossiers téléchargeables à partir du porte-documents, le module PHP `zlib` doit être installé.

### Mise en situation

On extrait l'archive, ce qui crée par exemple le dossier `squeletml-1.8`. Pour avoir un site situé dans un répertoire, copier le dossier `squeletml-1.8` sur le serveur et le renommer comme désiré, ce qui nous donne l'adresse `http://www.nomDeDomaine.ext/monSiteSqueletml/`. Pour avoir un site situé à la racine d'un nom de domaine, transférer sur le serveur le contenu du dossier `squeletml-1.8`, ce qui nous donne l'adresse `http://www.nomDeDomaine.ext/`.

## Configuration

### Actions obligatoires

Deux seuls fichiers doivent obligatoirement être créés et configurés, bien que vous voudrez probablement personnaliser ensuite le reste du site.

Tant que ces deux fichiers n'existent pas, la page d'accueil de votre installation de Squeletml émettra un avertissement.

**Note: les personnes installant Squeletml sur un serveur de Free.fr doivent effectuer quelques manipulations supplémentaires. Voir un peu plus bas.**

#### Le fichier `init.inc.php`

Avec la méthode de votre choix (par exemple en vous connectant par ftp au serveur hébergeant votre site), trouvez le fichier `init.inc.php.defaut`, situé à la racine de votre installation de Squeletml. Copiez-le et coller-le sous le nom `init.inc.php` (il faut donc enlever le `defaut` final du nom).

Ce fichier contient deux variables à renseigner:

- `$urlRacine`: il s'agit de l'adresse URL vers votre installation de Squeletml. Par exemple, `http://www.nomDeDomaine.ext/monSiteSqueletml` ou `http://www.nomDeDomaine.ext`.

- `$accueil[]`: il s'agit d'un tableau contenant l'adresse url de l'accueil pour chaque langue de votre site. Si votre site est offert dans une seule langue, le tableau ne contiendra qu'un élément. Exemple:

		$accueil['fr'] = $urlRacine;

	Vous pouvez ajouter autant de langues que vous le désirez. Seulement, prenez note que pour l'instant, Squeletml offre une traduction de son squelette prête à être utilisée pour seulement deux langues: le français et l'anglais.

Une fois ce fichier renseigné, vous pouvez visiter dans votre navigateur l'adresse URL de votre installation, par exemple `http://www.nomDeDomaine.ext/`.

#### Protection de l'administration (fichier `.acces`)

Une fois que le fichier `init.inc.php` existe et qu'il est correctement renseigné, il est important de protéger la section d'administration du site sans attendre. Pour ce faire, visitez la page suivante:

	http://www.nomDeDomaine.ext/admin/acces.admin.php

et ajoutez un utilisateur. Les utilisateurs sont listés dans le fichier `.acces` situé à la racine de votre installation de Squeletml.

**Note: comme action optionnelle après l'installation de Squeletml, il est possible de renommer le dossier d'administration pour plus de sécurité. La variable à modifier, `$dossierAdmin`, se trouve dans le fichier `inc/config.inc.php`. Le cas échéant, modifier le chemin vers l'administration dans les exemples de cette documentation, par exemple:**

	http://www.nomDeDomaine.ext/$dossierAdmin/acces.admin.php

#### Actions obligatoires supplémentaires sur un serveur de Free.fr

Pour une installation de Squeletml sur un serveur de Free.fr, il faut effectuer en plus les deux actions obligatoires suivantes:

- Ouvrir le fichier `init.inc.php` situé à la racine de l'installation. Trouver la variable `$serveurFreeFr` et modifier sa valeur pour `TRUE`.

- Ouvrir le fichier `.htaccess` situé à la racine de l'installation. Trouver la ligne suivante:

		#php 1

et la décommenter, ce qui donne:

		php 1

### Les autres fichiers

#### Le fichier `.htaccess`

Ce fichier contient entre autres l'adresse URL vers la page d'erreur 404 (toute personne tentant de visiter une page qui n'existe pas ou qui n'existe plus sur votre site sera redirigée vers cette page explicative). Si en visitant une page inexistante, vous ne voyez pas le contenu de la page d'erreur, ouvrez le fichier `.htaccess`, trouvez la ligne:

	ErrorDocument 404 /404.php

et modifiez `/404.php` par la bonne adresse URL, par exemple `http://www.nomDeDomaine.ext/404.php`.

D'autres pages d'erreur sont déclarées dans le `.htaccess`, comme celle pour l'erreur 401. Au besoin, modifier dans le `.htaccess` le chemin de toutes les pages d'erreur.

Ce fichier va également contenir les instructions pour protéger le dossier d'administration.

#### Le fichier `inc/config.inc.php`

Ce fichier contient beaucoup de paramètres au sujet du site. Les variables modifiables sont en général documentées directement dans le fichier de configuration. Mais pour bien comprendre comment tirer partie des possibilités de ce fichier, il faut préalablement comprendre la structure de Squeletml. Vous serez ensuite en mesure de modifier des paramètres de votre site.

## Structure de Squeletml

### Dossiers

La structure de Squeletml est la suivante:

- `admin` (le cas échéant, modifier le nom du dossier d'administration)
- `css`
- `en`
- `fichiers`
- `inc`
- `js`
- `locale`
- **`site`**

Tous les dossiers, à part `site`, font partie de la structure officielle par défaut de Squeletml, et les fichiers y étant contenus ne doivent pas être modifiés, sous peine de perdre les modifications lors d'une mise à jour de Squeletml.

**Toute modification apportée à la configuration doit donc être effectuée dans le dossier `site`.**

Par exemple, pour modifier l'apparence du site, **ne modifiez pas** le fichier `css/style-general.css`, mais créez un fichier dans `site/css`, par exemple `site/css/style.css`. Il faudra ensuite ajouter ce fichier dans les styles à inclure. Nous verrons comment faire un peu plus loin.

Pour ajouter des images, mettez vos fichiers dans `site/fichiers`. Pour ajouter des fichiers à inclure, créez des fichiers dans `site/inc`. Vous aurez compris, le dossier `site` recrée la structure par défaut de Squeletml, ce qui permet de pouvoir facilement personnaliser le site sans toucher aux fichiers officiels de Squeletml. La mise à jour du logiciel en sera grandement facilitée.

#### Le dossier `inc`

Le dossier `inc` contient tous les fichiers inclus dans chaque page du site. Il s'agit autant de la configuration que de la structure HTML (en-tête, menu, etc.). La plupart des fichiers peuvent être personnalisés en créant un fichier de même nom dans `site/inc`, et Squeletml reconnaîtra automatiquement le fichier personnel. Voici la liste des fichiers de `inc` que vous pouvez personnaliser dans votre dossier `site/inc`:

- `config.inc.php`: fichier important, contenant presque toute la configuration du site, autant pour le formulaire de contact, les galeries photos, le titre du site, etc. Pour modifier une variable de ce fichier, créer un fichier de même nom dans `site/inc`, ce qui donne:

		site/inc/config.inc.php

	et y réassigner les variables dont vous voulez changer la valeur. S'il existe, ce fichier sera inséré après celui par défaut.

	*Note: il est également possible de personnaliser la configuration de la section d'administration. Pour ce faire, créez un fichier `site/inc/config-admin.inc.php`*, et ajoutez-y les variables que vous voulez modifier.

- `constantes.inc.php`: contient les constantes PHP utilisées dans Squeletml. Vous pouvez ajouter vos propres constantes en créant le fichier `site/inc/constantes.inc.php`. S'il existe, ce fichier sera inséré après celui par défaut.

- `fonctions.inc.php`: contient les fonctions utilisées dans Squeletml. Vous pouvez créer vos propres fonctions dans le fichier `site/inc/fonctions.inc.php`, qui sera inséré après celui par défaut.

- Les fichiers de division HTML, qui sont, pour le français:

  - `html.fr.ancres.inc.php`
  - `html.fr.bas-de-page.inc.php`
  - `html.fr.menu.inc.php`
  - `html.fr.menu-langues.inc.php`
  - `html.fr.sous-titre.inc.php`
  - `html.fr.sur-titre.inc.php`

	Pour chaque autre langue, le `fr` est remplacé par le code approprié, par exemple `html.en.menu.inc.php`.

	Ces fichiers contiennent le contenu par défaut pour chaque division représentée. Vous pouvez personnaliser chaque division en créant un fichier de même nom dans `site/inc`. Par exemple, pour modifier le menu en français, créer un fichier `site/inc/html.fr.menu.inc.php` et modifiez son contenu comme désiré. **Ceci écrasera le fichier par défaut.** Ainsi, si `site/inc/html.fr.menu.inc.php` existe, le fichier par défaut `inc/html.fr.menu.inc.php` ne sera pas inclus.

	Certains fichiers n'existent pas par défaut dans `inc`, mais peuvent être créés dans `site/inc`. Voir la section «Divisions HTML».

- Les fichiers de page:

  - `page.fr.401.inc.php`
  - `page.fr.404.inc.php`
  - `page.fr.contact.inc.php`
  - `page.fr.galerie.inc.php`
  - `page.fr.index.inc.php`

	**Il s'agit des pages livrées par défaut par Squeletml.** C'est pour cette raison que leur contenu se trouve dans un fichier à inclure, sinon la mise à jour du logiciel risquerait de supprimer les modifications effectuées. **Toute autre page créée dans le site n'aura pas à utiliser ce système de contenu inclus.** Pour personnaliser une page livrée par défaut, par exemple la page d'accueil, créer le fichier `page.fr.index.inc.php` dans le dossier `site/inc/` et modifier son contenu. **Le fichier personnalisé sera inclus à la place du fichier `inc/page.fr.index.inc.php` par défaut.**
	
	La seule page que vous voudrez sans aucun doute personnaliser est la page d'accueil. Le système d'inclusion expliqué ci-dessus est donc tout indiqué. Cependant, pour les autres pages, il ne s'agit pas d'une nécessité absolue. En effet, les pages d'erreur 401 et 404 affichent un message standard et propose un lien vers l'accueil. Pour sa part, la page de contact peut utiliser un courriel par défaut si vous renseignez la variable `$courrielContactParDefaut` dans le fichier de configuration. Enfin, le lien vers la page de galerie par défaut peut être enlevé du menu si vous ne voulez pas de galerie ou si vous voulez une galerie avec un nom de page différent.

### Divisions HTML

*Note: la page [Aperçu de la structure d'une page de Squeletml](http://www.jpfleury.net/squeletml/structure) propose des explications accompagnées d'une capture d'écran annotée.*

Voici un modèle simplifié d'une page de Squeletml **par défaut**:

	Doctype XHTML 1.0 Strict
	<html ...><!-- La langue déclarée est celle de la page en cours -->
		<head>
			<title>...</title>
			Déclaration de l'encodage UTF-8
			Métabalises (description, keywords, robots)
			Insertion des feuilles de style et des scripts Javascript
		</head>

		<body ...><!-- Selon le cas, diverses classes pour body -->
			<div id="page">
			  <div id="interieurPage">
					S'il y a lieu, commentaire conditionnel pour Internet Explorer 6

					<div id="enTete">
						<div id="surTitre">
							...
						</div><!-- /surTitre -->
				
						<div id="titre">
							Titre du site dans un h1 s'il s'agit de la page d'accueil, sinon dans un p
						</div><!-- /titre -->

						<div id="sousTitre">
							...
						</div><!-- /sousTitre -->
					</div><!-- /enTete -->

					<div id="ancres">
						...
					</div><!-- /ancres -->
			
					<div id="surContenu">
						Vide par défaut
					</div><!-- /surContenu -->
			
					<div id="contenu">
						<div id="interieurContenu">
							...
						</div><!-- /interieurContenu -->
					</div><!-- /contenu -->
			
					<div id="sousContenu">
						<div id="menuLangues">
							...
						</div><!-- /menuLangues -->

						<div id="menu">
							...
						</div><!-- /menu -->
					
						<div id="faireDecouvrir">
							...
						</div><!-- /faireDecouvrir -->
					</div><!-- /sousContenu -->
			
					<div id="basDePage">
						...
					</div><!-- /basDePage -->
				</div><!-- /interieurPage -->
			</div><!-- /page -->
		</body>
	</html>

D'autres `div` peuvent apparaître à la suite de `<div id="interieurContenu">` selon le module en cours d'utilisation, par exemple `<div id="galerie">`. Aussi, certaines `div` peuvent être positionnées ailleurs selon les choix effectués dans le fichier de configuration, par exemple le menu.

#### Nombre de colonnes et contenu de celles-ci

Les sections «Activations et inclusions» et «Contenu et ordre du flux HTML» du fichier de configuration contiennent des commentaires explicatifs. Tout ne sera pas repris ici, mais en résumé, il est possible de choisir le nombre de colonnes ainsi que l'ordre de leur contenu. Le principe est le suivant: plusieurs blocs de menu existent par défaut, comme le menu des langues, le menu principal, les liens RSS, etc. Il est possible également d'ajouter ses propres blocs. Chaque bloc peut être positionné dans une des deux div suivantes (et dans l'ordre voulu à l'intérieur d'une même div): `surContenu` ou `sousContenu`. Ensuite, selon le style affecté (voir la section «Style CSS» du fichier de configuration), les div vont remplir une ou deux colonnes. Les possibilités sont: une seule colonne à droite, une seule colonne à gauche, deux colonnes dont celle de gauche est remplie par les blocs de `surContenu` et celle de droite par les blocs de `sousContenu`, ou deux colonnes dont celle de gauche est remplie par les blocs de `sousContenu` et celle de droite par les blocs de `surContenu`.

## Style de Squeletml

Le style d'un site réalisé avec Squeletml peut être modifié comme n'importe quel autre site à l'aide de feuilles de style CSS. Cependant, le fichier de configuration contient une section «Style CSS», offrant la possibilité de modifier quelques aspects du site sans devoir bidouiller dans une feuille de style. Voici quelques exemples: ajout de coins arrondis aux blocs de menu, nombre de colonnes, emplacement d'une colonne unique, arrière-plan des colonnes, contenu affichable ou masquable par clic sur le titre, etc.

## Traduction de Squeletml

Il est possible de traduire Squeletml dans la langue désirée. Le principal fichier est `locale/squeletml.pot`. Il contient la plupart des phrases à traduire. Les autres fichiers sont:

- `admin/versions-solo.admin.php` (le cas échéant, modifier le nom du dossier d'administration)
- `inc/html.fr.ancres.inc.php`
- `inc/html.fr.bas-de-page.inc.php`
- `inc/html.fr.menu.inc.php`
- `inc/html.fr.menu-langues.inc.php`
- `inc/html.fr.sous-titre.inc.php`
- `inc/html.fr.sur-titre.inc.php`
- `inc/page.fr.401.inc.php`
- `inc/page.fr.404.inc.php`
- `inc/page.fr.contact.inc.php`
- `inc/page.fr.galerie.inc.php`
- `inc/page.fr.index.inc.php`
- `documentation.mdtxt`
- `LISEZ-MOI.mdtxt`
- `maintenance.php`

## Mise à jour de Squeletml

**Note: lisez toute cette section avant d'effectuer une mise à jour.**

Pour mettre à jour Squeletml:

- Visitez la page `http://www.nomDeDomaine.ext/admin/acces.admin.php` (le cas échéant, modifier le nom du dossier d'administration) et mettez votre site en maintenance (hors ligne). Vous pouvez ajouter votre adresse IP dans le champ prévu à cet effet pour avoir encore accès à votre site durant la maintenance.

	La page de maintenance n'a pas de dépendance à des fichiers du site, à l'exception du fichier `.htaccess` de la racine, ce qui veut dire qu'en mode maintenance, vous pouvez supprimer ou déplacer tous les fichiers voulus, à l'exception de la page de maintenance et du `.htaccess`.

	**Note: la réécriture d'URL doit être activée sur votre serveur pour utiliser cette fonctionnalité. Si tel n'est pas le cas, ignorez le mode maintenance et passez à l'étape suivante.**

- Téléchargez l'archive de la dernière version et extrayez son contenu. Vous allez obtenir un dossier dont le nom ressemble à `squeletml-1.8`.

- Ensuite, sélectionnez et copiez tout le contenu de ce dossier, à l'exception éventuellement de ce qui suit: vous avez fort probablement personnalisé le fichier `.htaccess` (ne serait-ce que pour protéger l'accès à l'administration), et peut-être le fichier `robots.txt`. Dans ce cas, ne copiez pas le ou les fichiers modifiés. Vous pouvez cependant vérifier si ces fichiers ont été modifiés dans la nouvelle version de Squeletml et, si tel est le cas, les éditer à la main pour y appliquer les changements.

- Maintenant, collez votre précédente sélection dans l'emplacement de votre site, et ce en acceptant de fusionner les dossiers et d'écraser les fichiers déjà existants.

Il s'agit probablement de la méthode la plus simple. Cependant, de vieux fichiers supprimés entre deux versions de Squeletml peuvent encore être présents sur votre site. Pour une mise à jour totalement propre, vous pouvez supprimer les fichiers de Squeletml de votre site avant d'y coller votre précédente sélection. Prenez garde cependant à **ne pas supprimer**, en plus des fichiers `.htaccess` ou `robots.txt`, le dossier `site`, qui contient votre configuration personnalisée, et éventuellement les dossiers des différentes langues si votre site est multilingue (par exemple, si vous avez une section en anglais, vous avez fort probablement créé des pages personnalisées dans le dossier `en`).

**Note: si vous avez modifié le nom du dossier d'administration, ne pas oublier de supprimer l'ancien dossier et de renommer le nouveau.**

## Création de pages

Il y a plusieurs manières de créer une page:

1. Copier le fichier `modele.php` et le coller avec le nom désiré.
2. Dans le porte-documents de la section d'administration, créer un nouveau fichier de type «Fichier modèle de page web».
3. Créer un fichier vide et reproduir la structure d'une page.

Voici la structure d'une page:

1. variables PHP
2. inclusion du premier fichier PHP
3. contenu de la page
4. inclusion du dernier fichier PHP

### Variables PHP

Voici les différentes variables optionnelles avant l'inclusion du premier fichier PHP:

- `$baliseTitle`: contenu de la balise `title`. Si cette variable est vide, elle se verra assigner l'URL de la page en cours.

- `$description`: contenu de la métabalise `description`. Si cette variable est vide, la métabalise `description` ne sera pas incluse dans l'en-tête de la page.

- `$motsCles`: contenu de la métabalise `keywords`. Si cette variable est vide ou inexistante, elle sera générée automatiquement à partir du contenu de la variable `$description`. Prenez note que si `$motsClesInclusion` vaut `FALSE` dans le fichier de configuration, les mots-clés ne seront pas ajoutés à l'en-tête de la page, même si `$motsCles` n'est pas vide.

- `$langue`: langue de la page courante, si différente de la langue par défaut déclarée dans le fichier `inc/config.inc.php`.

- `$robots`: contenu de la métabalise `robots`, si différent du contenu par défaut déclaré dans le fichier `inc/config.inc.php`.

- `$courrielContact`: adresse courriel qui va recevoir les messages du formulaire de contact. Si cette variable existe et n'est pas vide, un formulaire de contact sera automatiquement inclus dans la page. Il est donc facile de créer autant de formulaires que désiré en créant pour chacun une page contenant une varibale `$courrielContact`.

	Note: dans le formulaire de contact livré par défaut avec Squeletml, cette variable vaut simplement `@`. Puisqu'elle n'est pas vide, un formulaire de contact s'affiche. Cependant, le formulaire par défaut n'est pas utilisable en ce sens que la valeur de `$courrielContact` n'est pas une adresse réelle. Toutefois, si la variable `$courrielContactParDefaut` est renseignée dans le fichier de configuration, toutes les variables `$courrielContact` valant exactement `@` prendront la valeur de `$courrielContactParDefaut`, ce qui évite de devoir créer une page de contact personnalisée simplement parce que le formulaire par défaut n'a pas une adresse valide.

- `$boitesDeroulantes`: permet d'activer les boîte déroulantes pour du contenu présent dans la page en cours. Voir les commentaires de la variable `$boitesDeroulantesParDefaut` dans le fichier de configuration `inc/config.inc.php` pour une description détaillée de la syntaxe à utiliser.

- `$idGalerie`: un nombre ou un mot identifiant la galerie. Représente le nom du répertoire qui sera lu dans `site/fichiers/galeries` pour lister les images. Par défaut, cette variable vaut `FALSE`, mais si elle vaut autre chose, et si le fichier de configuration existe pour cet `id` (voir plus loin), une galerie sera insérée dans la page.

	Par exemple, si nous avons `$idGalerie = 1;`, Squeletml va rechercher le dossier `site/fichiers/galeries/1`. Si le dossier n'existe pas, une galerie par défaut de démonstration sera affichée (`fichiers/galeries/demo`).

- `$rss`: prend la valeur `TRUE` ou `FALSE`, selon qu'on veut activer ou non la syndication de contenu individuelle pour la **galerie** en question.

- `$tableDesMatieres`: prend la valeur `TRUE` ou `FALSE`, selon qu'on veut générer ou non une table des matières pour la page en question. La table des matières est générée par Javascript. Son contenu correspond à tous les titres de niveaux 2 à 6 présents dans le contenu, c'est-à-dire à l'intérieur de la div `interieurContenu`. La table est ajoutée au début de cette div.

	La variable `$tableDesMatieresParDefaut`, déclarée dans le fichier `inc/config.inc.php`, s'applique à toutes les pages du site. Utiliser `$tableDesMatieres` pour changer la valeur par défaut pour une page spécifique.

### Inclusion du premier fichier PHP

Il suffit d'inclure le fichier `inc/premier.inc.php`.

#### Cas de l'installation par défaut de Squeletml

Ne pas oublier de vérifier le chemin d'inclusion. Par exemple, pour une page à la racine du site, ça donnera:

	include 'inc/premier.inc.php'; // Le cas échéant, modifier le chemin d'inclusion

Pour une page dans un dossier:

	include '../inc/premier.inc.php'; // Le cas échéant, modifier le chemin d'inclusion

Pour une page dans un sous-dossier (dossier dans un dossier):

	include '../../inc/premier.inc.php'; // Le cas échéant, modifier le chemin d'inclusion

#### Cas avec insertion automatique du fichier `init.inc.php`

**Note: je n'ai pas vraiment testé à fond cette possibilité, et ce n'est pas supporté officiellement dans Squeletml.**

Le fichier `init.inc.php` contient entre autres la variable `$racine`. En faisant insérer automatiquement ce fichier dans toutes les pages, il est donc possible d'utiliser la variable `$racine` pour inclure le fichier `inc/premier.inc.php`, ce qui nous dispense de devoir modifier le chemin d'inclusion selon le dossier dans lequel la page est située.

Pour ce faire, ouvrir le fichier `.htaccess`, trouver la ligne contenant la directive `auto_prepend_file`, et la décommenter, ce qui va donner:

	<FilesMatch "\.(php)$"> 
		php_value auto_prepend_file "/var/www/serveur_local/squeletml/init.inc.php"
	</FilesMatch>

Ne pas oublier de modifier le chemin d'inclusion du fichier `init.inc.php`.

### Contenu

Mettre tout ce que vous désirez. Du texte, du code HTML, du code PHP, etc.

#### Utilisation de la syntaxe Markdown

Il est possible d'utiliser la [syntaxe Markdown](http://michelf.com/projets/php-markdown/syntaxe/). Pour ce faire, il y a deux fonctions mises à disposition:

##### Fonction `mdtxt()`

Écrire le contenu en Markdown dans un fichier. Ensuite, faire appel à cette fonction dans la page du site. Exemple:

1. Création du fichier `ma-page.php.mdtxt`, et rédaction du contenu en Markdown dans ce fichier.

2. Création de la page `ma-page.php`, comme n'importe quelle autre page du site. On suppose dans cet exemple que le fichier `ma-page.php.mdtxt` et la page `ma-page.php` sont dans le même dossier (ce n'est pas obligatoire).

3. À l'intérieur de `ma-page.php`, à l'endroit où on insère habituellement le contenu, faire appel à la fonction suivante:

		<?php echo mdtxt('ma-page.php.mdtxt'); ?>

##### Fonction `mdtxtChaine()`

On peut passer directement une chaîne écrite en Markdown à la fonction `mdtxtChaine()`. Exemple:

1. Création d'une page pour le site, par exemple `une-page.php`.

2. À l'endoit où on insère habituellement le contenu, utiliser la fonction suivante:

		<?php echo mdtxtChaine("Du texte écrit en *Markdown*."); ?>

	Même exemple, mais avec une variable:

		<?php
		$chaine = "Du texte écrit en *Markdown*.";
		echo mdtxtChaine($chaine);
		?>

	Autre exemple avec une variable dont le contenu est plus long:

		<?php
		$chaine = <<<TEXTE
		Du texte écrit en *Markdown*.
		
		Liste:
		
		- Item 1
		- Item 2
		
		Paragraphe.
		TEXTE;
		
		echo mdtxtChaine($chaine);
		?>

#### Variables et constantes utiles

Quelques variables et constantes PHP peuvent être utilisées dans la rédaction du contenu pour faciliter l'élaboration des chemins vers les fichiers:

- variable `$racine`: contient le chemin sur le serveur vers le dossier d'installation de Squeletml. Exemple d'inclusion d'un fichier situé à la racine de l'installation de Squeletml:

		<?php include $racine . '/fichier.inc.php'; ?>

- variable `$urlRacine`: contient l'URL vers le dossier d'installation de Squeletml. Exemple:

		<a href="<?php echo $urlRacine . '/maintenance.php'; ?>">lien vers la page de maintenance</a>

- variable `$urlSite`: contient l'URL vers le dossier `site`. Exemple de lien vers une image:

		<a href="<?php echo $urlSite; ?>/fichiers/image.jpg">lien vers une image</a>

- variable `$urlFichiers`: contient l'URL vers le dossier `site/fichiers`. Exemple de lien vers la même image:

		<a href="<?php echo $urlFichiers; ?>/image.jpg">lien vers une image</a>

- constante `ACCUEIL`: contient l'URL pointant vers l'accueil de la langue de la page.

  - Exemple d'utilisation dans une page dont la langue est le français:

			<a href="<?php echo ACCUEIL; ?>/contact.php">lien vers la page contact de la section en français</a>

  - Exemple d'utilisation dans une page dont la langue est l'anglais:

			<a href="<?php echo ACCUEIL; ?>/contact.php">lien vers la page contact de la section en anglais</a>

- constante `LANGUE`: contient la langue de la page en cours (ex.: `fr`).

- constante `PAGE`: contient la page en cours. Exemple:

		fichier.php

- constante `URL`: contient l'URL de la page en cours. Exemple:

		http://www.NomDeDomaine.ext/fichier.php?a=2&b=3

- tableau `$accueil`: permet d'utiliser un lien vers l'accueil de n'importe quelle langue. Par exemple, dans une page en français:

		<a href="<?php echo $accueil['en']; ?>/gallery.php">lien vers une galerie dans la section en anglais</a>

#### Coloration de code PHP

Il est possible d'utiliser une version personnalisée des fonctions `highlight_string()` et `highlight_file()` de PHP. En effet, `coloreCodePhp()` et `coloreFichierPhp()` remplacent les espaces insécables par des espaces normales et modifient les couleurs par défaut (entre autres pour améliorer le contraste des commentaires).

Les deux premiers paramètres sont les mêmes que ceux des fonctions natives de PHP. De plus, un paramètre supplémentaire permet d'afficher les commentaires en noir.

Exemples:

	<?php coloreFichierPhp($cheminFichier); ?>
	<?php $texte = coloreFichierPhp($cheminFichier, TRUE); ?>
	<?php coloreCodePhp($code, FALSE, TRUE); ?>

Voir la déclaration de la fonction dans le fichier `inc/fonctions.inc.php` pour plus de détails.

### Inclusion du dernier fichier PHP

Il suffit d'inclure le fichier `inc/dernier.inc.php`. Cette fois-ci, il n'est pas nécessaire de faire attention au chemin d'inclusion. Nous pouvons utiliser la variable `$racine`. Exemple:

	<?php include $racine . '/inc/dernier.inc.php'; ?>

### Exemple complet

Voici un exemple:

	<?php
	$baliseTitle = "Titre (contenu de la balise `title`)";
	$description = "Description de la page";
	include 'inc/premier.inc.php'; // Le cas échéant, modifier le chemin d'inclusion
	?>

	<h1>Titre de la page</h1>

	<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</p>

	<?php include $racine . '/inc/dernier.inc.php'; ?>

## Galeries

*Note: la page [Bref tour d'horizon du module de galerie de Squeletml](http://www.jpfleury.net/squeletml/galerie) propose des explications accompagnées de captures d'écran.*

Chaque galerie possède son propre identifiant unique, aussi appelé *id*, qui peut être un nombre ou une chaîne de caractères que vous choisissez lors de sa création, et qui est utilisé par Squeletml pour différencier les galeries. Pour l'explication qui suit, disons que l'identifiant vaut `galerie1`. Les trois points suivants doivent être satisfaits pour qu'une galerie soit accessible:

- un dossier contenant les images, présent dans `site/fichiers/galeries/` et dont le nom correspond à l'identifiant de la galerie, ce qui donne pour notre exemple `site/fichiers/galeries/galerie1/`;

- un fichier de configuration listant les images à afficher et éventuellement diverses informations optionnelles, et situé dans `site/fichiers/galeries/identifiantDeLaGalerie`. Il y a deux noms possibles pour le fichier de configuration: `config.ini.txt` ou `config.ini`. Le premier fichier existant trouvé est utilisé, `config.ini.txt` étant cherché en premier. Cela donne pour notre exemple `site/fichiers/galeries/galerie1/config.ini.txt` ou `site/fichiers/galeries/galerie1/config.ini`;

- une page à visiter sur le site pour afficher la galerie, par exemple `ma-galerie-de-test.php`. Cette page peut être située n'importe où sur le site. L'important est d'insérer dans la page l'identifiant de la galerie que vous voulez afficher.

Concrètement, pour créer une galerie, voici les étapes à suivre:

1. Ajouter une variable `$idGalerie` au début de la page qu'on veut utiliser comme galerie, et l'assigner avec l'identifiant voulu (`$idGalerie = "ceQuOnVeut";`).

2. Créer un dossier `site/fichiers/galeries/$idGalerie` et y mettre les images.

3. Créer un fichier de configuration `site/fichiers/galeries/$idGalerie/config.ini.txt` ou `site/fichiers/galeries/$idGalerie/config.ini`. Cette étape est développée ci-dessous.

### Fichier de configuration d'une galerie

Chaque image d'une galerie est déclinée en au moins deux versions: vignette et intermédiaire. Une troisième version peut être offerte en téléchargement: le format original. Chacune des images peut se voir assigner différentes informations optionnelles, par exemple la valeur de chaque attribut (`width`, `height`, `alt`, `src (nom du fichier)`) de la balise `img`. En fait, une seule information est obligatoire dans le fichier de configuration: le nom du fichier de l'image en version intermédiaire.

Cette information doit se retrouver dans le fichier de configuration `site/fichiers/galeries/$idGalerie/config.ini.txt` ou `site/fichiers/galeries/$idGalerie/config.ini`. Vous pouvez générer et mettre à jour automatiquement le contenu de ce fichier en utilisant le script de gestion des galeries dans la section d'administration. Vous pouvez également le créer et le modifier à la main à l'aide d'un simple éditeur de texte.

Chaque oeuvre de la galerie possède sa propre section dans le fichier de configuration. La section commence par un titre entre crochets représentant le nom du fichier de l'image en version intermédiaire (et se termine par le début d'une autre section ou par la fin du fichier):

	`[intermediaireNom]`

Voici un exemple:

	[fichier1.jpg]
	[fichier2.jpg]

Il s'agit d'une configuration minimale pour une galerie de deux images. Il est cependant possible d'ajouter beaucoup plus d'information pour chaque oeuvre. Voici la liste complète des paramètres possibles:

- `id`: l'id est utilisée dans l'adresse URL pour identifier l'oeuvre, au lieu de l'indice de la position de l'oeuvre dans le tableau de la galerie. Cela permet de facilement déplacer des oeuvres dans la galerie sans modifier leur URL. Si l'id n'est pas renseignée, elle sera générée automatiquement à partir du nom du fichier image. Exemple:

		id=5

- `vignetteNom`: nom de l'image en version vignette. Si l'information n'est pas renseignée, le nom de la vignette sera déduit à partir du nom de l'image en version intermédiaire, c'est-à-dire `intermediaireNom(sans extension)-vignette.extension`. Exemple:

		vignetteNom=fichier1Petit.jpg

- `vignetteLargeur`: largeur de la vignette. Si `vignetteLargeur` ou `vignetteHauteur` sont renseignées, seulement la ou les informations renseignées seront affichées dans la balise `img`. Si les deux sont vides, les attributs `width` et `height` seront calculés automatiquement. Exemple:

		vignetteLargeur=100

- `vignetteHauteur`: hauteur de la vignette. Voir `vignetteLargeur` pour plus de détails. Exemple:

		vignetteHauteur=150

- `vignetteAlt`: texte alternatif (contenu de l'attribut `alt`) de la vignette. Si vide, le contenu sera généré automatiquement. Exemple:

		vignetteAlt=Chien assis sur un divan.

- `intermediaireLargeur`: largeur de l'image en version intermédiaire. Voir `vignetteLargeur` pour plus de détails. Exemple:

		intermediaireLargeur=500

- `intermediaireHauteur`: hauteur de l'image en version intermédiaire. Voir `vignetteLargeur` pour plus de détails. Exemple:

		intermediaireHauteur=750

- `intermediaireAlt`: texte alternatif (contenu de l'attribut `alt`) de l'image en version intermédiaire. Si vide, le contenu sera généré automatiquement. Exemple:

		intermediaireAlt=Chien dormant sur un divan.

- `intermediaireLegende`: commentaire qui sera affiché sous l'image en version intermédiaire. Exemple:

		intermediaireLegende=Cette photographie a été prise le... à... avec un appareil de marque... et représente...

- `pageIntermediaireBaliseTitle`: contenu de la balise `title` de la page présentant l'image en version intermédiaire. Laisser vide pour une génération automatique. Exemple:

		pageIntermediaireBaliseTitle=Bla bla bla

- `pageIntermediaireDescription`: contenu de la métabalise `description` de la page présentant l'image en version intermédiaire. Laisser vide pour une génération automatique. Exemple:

		pageIntermediaireDescription=Bla bla bla

- `pageIntermediaireMotsCles`: contenu de la métabalise `keywords` de la page présentant l'image en version intermédiaire. Laisser vide pour une génération automatique. Exemple:

		pageIntermediaireMotsCles=photo de chien, bla bla bla, divan, photographie, chien

- `originalNom`: nom de l'image au format original (en tout cas normalement de taille plus importante que la version intermédiaire, ou un fichier source). Si l'information est renseignée, un lien de téléchargement vers ce fichier sera ajouté, selon la configuration, dans le bas de l'image en version intermédiaire, directement sur l'image ou sur une petite icône sous l'image (l'icône par défaut est `fichiers/agrandir.png`; pour utiliser sa propre icône, créer le fichier `site/fichiers/agrandir.png`). Si l'information n'est pas renseignée, un nom sera construit à partir du nom de l'image en version intermédiaire, c'est-à-dire `intermediaireNom(sans extension)-original.extension`, un test sera effectué pour savoir si ce fichier existe, et s'il existe, un lien sera ajouté. Exemple:

		originalNom=fichier1Original.jpg

- `exclure`: informe si l'image doit être exclue de la galerie. Par défaut, l'image n'est pas exclue, mais elle l'est si `exclure` vaut `oui`. Exemple:

		exclure=oui

Voici un exemple pour une galerie de deux images:

	[fichier1.jpg]
	id=1
	intermediaireLegende=Lorem ipsum dolor sit amet.
	
	[fichier2.jpg]
	intermediaireLegende=Praesent tempus; odio ac sagittis vehicula.

Voici une entrée vide, qu'il est possible de copier/coller:

	[intermediaireNom]
	id=
	vignetteNom=
	vignetteLargeur=
	vignetteHauteur=
	vignetteAlt=
	intermediaireLargeur=
	intermediaireHauteur=
	intermediaireAlt=
	intermediaireLegende=
	pageIntermediaireBaliseTitle=
	pageIntermediaireDescription=
	pageIntermediaireMotsCles=
	originalNom=
	exclure=

*Note: avant la version 1.9.2, le fichier de configuration n'était pas un fichier `.ini`. Chaque oeuvre était déclarée par le champ `intermediaireNom`, qui était la seule information obligatoire, et se terminait par un marqueur `#IMG` ou, avant la version 1.8.8, par `__IMG__`. Voici un exemple:*

	intermediaireNom=image1.png
	id=1
	originalNom=image1.xcf
	#IMG
	intermediaireNom=image2.png
	id=2
	originalNom=image2.xcf
	#IMG

### Navigation entre les oeuvres

Il y a six méthodes possibles pour naviguer entre les oeuvres:

#### Fenêtre Javascript

Il s'agit de la seule méthode de navigation sans passer par le rechargement de la page pour consulter les images. Plus précisément, en choisissant cette option, le script Slimbox 2 est utilisé pour passer d'une image à une autre sur la page d'accueil de la galerie au lieu de naviguer d'une image à une autre en rechargeant toute la page.

Si une légende est précisée pour une image, elle s'affiche sous cette dernière dans la fenêtre Javascript.

#### Flèches

Les flèches par défaut sont `fichiers/precedent.png` et `fichiers/suivant.png`. Pour utiliser ses propres images, créer les fichiers `site/fichiers/precedent.png` et `site/fichiers/suivant.png`.

Il est possible de choisir l'emplacement des flèches (haut ou bas).

#### Vignettes

Il est possible de choisir l'emplacement des vignettes (haut ou bas).

##### Vignettes seules

Les vignettes utilisées sont celles de l'image vers laquelle le lien pointe:

- soit la vignette précisée dans le fichier de configuration (paramètre `vignetteNom`);

- soit la vignette déduite automatiquement à partir du nom du fichier de l'image en version intermédiaire (`intermediaireNom(sans extension)-vignette.extension`);

- soit la vignette générée automatiquement par le script de galerie.

##### Vignettes tatouées d'une flèche

Dans le cas où l'option `$galerieNavigationVignettesTatouage` est activée dans le fichier de configuration, une vignette personnalisée est générée par le script (à partir de la vignette de l'image) sur laquelle une flèche est superposée au centre.

Les fichiers par défaut pour les flèches superposées sont `fichiers/precedent-tatouage.png` et `fichiers/suivant-tatouage.png`. Pour utiliser ses propres images, créer les fichiers `site/fichiers/precedent-tatouage.png` et `site/fichiers/suivant-tatouage.png`.

La vignette résultante est sauvegardée dans `site/fichiers/galeries/id/tatouage/vignetteNom-sens.extension`. Il y a donc deux vignettes tatouées par image (une pour le sens «précédent» et l'autre pour le sens «suivant»).

##### Vignettes seules accompagnées d'une flèche

Dans le cas où les vignettes seules sont utilisées (sans tatouage), il est possible d'ajouter une flèche à côté de la vignette.

Les fichiers par défaut pour les flèches accompagnant les vignettes sont `fichiers/precedent-accompagnee.png` et `fichiers/suivant-accompagnee.png`. Pour utiliser ses propres images, créer les fichiers `site/fichiers/precedent-accompagnee.png` et `site/fichiers/suivant-accompagnee.png`.

#### Minivignettes

Il est possible d'ajouter au système de flèches ou de vignettes un aperçu de la galerie, composé de minivignettes des oeuvres de la galerie. Chaque minivignette est cliquable. Par défaut, la hauteur d'une minivignette est de 35 px. Ceci peut être modifié par CSS.

Il est possible de choisir l'emplacement des minivignettes (haut ou bas).

## Lien «Faire découvrir à des ami-e-s»

Une option «Faire découvrir à des ami-e-s» est activée par défaut. Concrètement, un lien est inséré dans le menu pour offrir la possibilité à l'internaute d'envoyer un message à une ou plusieurs personnes pour leur faire connaître la page visitée. En cliquant sur ce lien, un formulaire de contact est ajouté dans le bas de la page. Le modèle du message qui sera envoyé est présenté à l'internaute, et ce dernier peut ajouter un petit mot personnalisé.

Si la page visitée est la page individuelle d'une oeuvre dans une galerie, le modèle de message contiendra une vignette de l'oeuvre et, si possible, une description, qui est formée par une de ces informations (en ordre de priorité):

- `intermediaireLegende`
- `intermediaireAlt`
- `vignetteAlt`
- `pageIntermediaireDescription`
- `pageIntermediaireBaliseTitle`

Si la page visitée est autre chose qu'une page individuelle d'oeuvre, le modèle de message contiendra un lien vers la page et, si possible une description, qui est formée par une de ces informations (en ordre de priorité):

- `$baliseDescription`
- `$baliseTitle`

## Syndication de contenu (flux RSS)

### Syndication individuelle

#### Syndication par galerie

Par défaut, chaque galerie possède son propre flux RSS, généré automatiquement. Dans la configuration, il est possible de désactiver par défaut la syndication individuelle des galeries. Dans tous les cas, la variable optionnelle `$rss` peut être renseignée dans le fichier PHP de la galerie pour activer (`TRUE`) ou désactiver (`FALSE`) la syndication pour la galerie en question.

### Syndication globale

*Note: chaque langue du site a sa propre syndication globale. Le code de la langue dans les explications qui suivent précise la langue de la syndication globale. Par exemple, `fr` signifie que la page en question sera incluse dans le flux RSS global de la section du site en français. Le code de la langue doit correspondre aux indices du tableau `$accueil`, déclaré dans le fichier `init.inc.php`, situé à la racine du site.*

#### Syndication globale des galeries

Par défaut, le flux RSS comprenant toutes les galeries du site est désactivé. Ceci peut être modifié dans le fichier de configuration. Si le flux RSS global des galeries est activé, un fichier `site/inc/rss-global-galeries.ini.txt` ou `site/inc/rss-global-galeries.ini` doit être créé à la main ou à l'aide du script de gestion des flux globaux dans la section d'administration de Squeletml. Ce fichier doit contenir la liste des galeries du site sous la forme suivante:

	code de la langue:id de la galerie=URL relative de la galerie

Le code de la langue précise la langue de la syndication globale. L'id correspond à la valeur donnée à la variable `$idGalerie`, et l'URL relative est le chemin de la galerie à partir de l'URL racine du site. Exemple pour un site de deux galeries:

	fr:mes voyages=voyages.php
	fr:animaux=dossier/galerie-animaux.php

Les deux galeries en question sont accessibles respectivement à l'adresse:

	$urlRacine/voyages.php

et:

	$urlRacine/dossier/galerie-animaux.php

**Note: puisque le script ne lit que la liste du fichier de configuration `site/inc/rss-global-galeries.ini.txt` ou `site/inc/rss-global-galeries.ini`, le fait d'avoir désactivé la syndication individuelle d'une galerie avec `$rss = FALSE;` n'aura aucun effet sur la présence de cette galerie dans le flux global. Pour ne pas inclure une galerie dans le flux global, ne pas la lister dans le fichier de configuration tout simplement.**

#### Syndication globale du site

Par défaut, la syndication globale du site est désactivée, mais peut être activée dans le fichier de configuration. Si elle est activée, un fichier `site/inc/rss-global-site.pc` doit être créé à la main ou à l'aide du script de gestion des flux globaux dans la section d'administration de Squeletml. Ce fichier doit contenir la liste des pages à inclure dans le flux RSS, et ce sous la forme suivante:

	code de la langue:URL relative de la page

Le code de la langue précise la langue de la syndication globale. L'URL relative est le chemin de la page à partir de l'URL racine du site. Exemple:

	fr:dossier1/dossier2/page.php

La page en question est accessible à l'adresse suivante:

	$urlRacine/dossier1/dossier2/page.php

L'inclusion des galeries dans le flux global du site dépend de la valeur de la variable `$galerieFluxRssGlobal`, présente dans le fichier de configuration. Si cette variable vaut `TRUE`, les galeries seront incluses, sinon seules les pages listées dans le fichier `site/inc/rss-global-site.pc` composeront le flux global du site.

## Développement

Le [logiciel Bazaar](http://bazaar-vcs.org/PageD%27Accueil) est utilisé pour le versionnage des fichiers. [La version de développement est disponible sur Launchpad](https://code.launchpad.net/squeletml).

### Téléchargement de la version de développement

Pour récupérer la version de développement, simnplement saisir cette commande dans une console:

	bzr branch lp:squeletml

### Fichier `Makefile`

Les principales commandes du fichier `Makefile` sont:

- `make generer`: met à jour les fichiers qui sont versionnés, mais pas créés ni gérés à la main, par exemple les fichiers de langue. Est utilisé en général avant la dernière révision d'une prochaine version.

- `make publier`: crée des archives `.bz2` et `.zip`; y ajoute les fichiers qui ne sont pas versionnés, mais nécessaires; supprime les fichiers versionnés, mais inutiles; copie certains fichiers utiles (comme le `ChangeLog`) sur le bureau; et déplace les archives également sur le bureau. Est utilisé après un `bzr tag...` pour la sortie d'une nouvelle version.

- `make ini`:
